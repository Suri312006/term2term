// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.0
// source: convo.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConvoService_Create_FullMethodName = "/t2t.ConvoService/Create"
	ConvoService_List_FullMethodName   = "/t2t.ConvoService/List"
)

// ConvoServiceClient is the client API for ConvoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConvoServiceClient interface {
	Create(ctx context.Context, in *NewConvoReq, opts ...grpc.CallOption) (*Convo, error)
	List(ctx context.Context, in *ListConvoReq, opts ...grpc.CallOption) (*ConvoList, error)
}

type convoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConvoServiceClient(cc grpc.ClientConnInterface) ConvoServiceClient {
	return &convoServiceClient{cc}
}

func (c *convoServiceClient) Create(ctx context.Context, in *NewConvoReq, opts ...grpc.CallOption) (*Convo, error) {
	out := new(Convo)
	err := c.cc.Invoke(ctx, ConvoService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *convoServiceClient) List(ctx context.Context, in *ListConvoReq, opts ...grpc.CallOption) (*ConvoList, error) {
	out := new(ConvoList)
	err := c.cc.Invoke(ctx, ConvoService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConvoServiceServer is the server API for ConvoService service.
// All implementations must embed UnimplementedConvoServiceServer
// for forward compatibility
type ConvoServiceServer interface {
	Create(context.Context, *NewConvoReq) (*Convo, error)
	List(context.Context, *ListConvoReq) (*ConvoList, error)
	mustEmbedUnimplementedConvoServiceServer()
}

// UnimplementedConvoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConvoServiceServer struct {
}

func (UnimplementedConvoServiceServer) Create(context.Context, *NewConvoReq) (*Convo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedConvoServiceServer) List(context.Context, *ListConvoReq) (*ConvoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedConvoServiceServer) mustEmbedUnimplementedConvoServiceServer() {}

// UnsafeConvoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConvoServiceServer will
// result in compilation errors.
type UnsafeConvoServiceServer interface {
	mustEmbedUnimplementedConvoServiceServer()
}

func RegisterConvoServiceServer(s grpc.ServiceRegistrar, srv ConvoServiceServer) {
	s.RegisterService(&ConvoService_ServiceDesc, srv)
}

func _ConvoService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewConvoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConvoServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConvoService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConvoServiceServer).Create(ctx, req.(*NewConvoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConvoService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConvoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConvoServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConvoService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConvoServiceServer).List(ctx, req.(*ListConvoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ConvoService_ServiceDesc is the grpc.ServiceDesc for ConvoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConvoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "t2t.ConvoService",
	HandlerType: (*ConvoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ConvoService_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ConvoService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "convo.proto",
}
